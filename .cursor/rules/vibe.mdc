---
description: 
globs: 
alwaysApply: true
---
# Cursor 规则配置

## 组件文档规范

### 强制要求
- 每个 React 组件 (.tsx/.jsx) 必须有对应的 `.vibe.md` 文档文件
- 文档文件必须与组件文件在同一目录下
- 文件命名规则：`{ComponentName}.vibe.md`

### 组件文档模板
当创建新组件时，必须同时创建对应的 `.vibe.md` 文件，内容模板如下：

```markdown
# {ComponentName} 组件文档

## 用户需求
### 原始需求
> 来自产品/用户的原始需求描述

### 期望效果
- 用户期望达到的效果
- 使用场景描述

## 实现功能
### 主要功能
- [ ] 功能1：具体描述功能逻辑
- [ ] 功能2：具体描述功能逻辑

## 变更历史
### v1.0.0
- **变更类型**: 新增 | 修改 | 修复 | 重构
- **变更原因**: 具体原因
- **变更内容**: 详细描述

```

### 自动化规则

1. **新组件创建规则**
   - 创建新的 React 组件时，自动提示创建对应的 `.vibe.md` 文档
   - 如果没有文档文件，在代码审查时给出警告

2. **组件修改规则**
   - 修改组件功能时，必须同时更新对应的 `.vibe.md` 文档
   - 在变更历史中添加新的版本记录

3. **文档维护规则**
   - 每次组件修改后，检查文档是否需要更新
   - 确保文档中的功能列表与实际实现保持一致

### 代码风格要求

- 使用 TypeScript 进行类型定义
- 组件 props 必须有明确的类型注解
- 复杂组件必须拆分为更小的子组件
- 使用 React Hooks 而非 Class 组件

### 文件组织规则

- 组件文件结构：
  ```
  components/
  ├── Button.tsx
  ├── Button.vibe.md
  ```

### 提交规则

- 每次提交必须包含相关的文档更新
- 提交信息必须说明对组件的修改内容
- 如果修改了组件功能，必须更新对应的 `.vibe.md` 文档

### 代码审查检查点

- [ ] 新组件是否有对应的 `.vibe.md` 文档
- [ ] 文档内容是否完整准确
- [ ] 变更历史是否已更新
- [ ] 功能描述是否与实际实现一致
- [ ] 性能考虑是否已记录

### 异常处理

- 如果发现组件没有对应的文档文件，立即创建
- 如果文档内容过时，及时更新

- 定期检查文档与代码的一致性 